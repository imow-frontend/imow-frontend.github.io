{"meta":{"title":"阿母工业前端组","subtitle":null,"description":null,"author":"中力前端组","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-08-29T09:09:19.000Z","updated":"2019-09-03T07:09:14.694Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-29T09:09:57.000Z","updated":"2019-09-03T07:09:14.695Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SPA的前世今生","slug":"SPA的前世今生","date":"2019-10-11T07:24:55.000Z","updated":"2019-10-22T12:11:39.775Z","comments":true,"path":"2019/10/11/SPA的前世今生/","link":"","permalink":"http://yoursite.com/2019/10/11/SPA的前世今生/","excerpt":"","text":"前言SPA(Single Page Application)，即单页应用，想必现在的前端对其早已耳熟能详，今天就来说道说道，SPA 的前世今生。 多页面应用（MultiPage Application，MPA）为什么先说多页面，因为传统网站都是多页面的，从大学第一次做网页，到工作使用 JQ 库，一个个 html 页面拼凑而成的网站都是多页面的。每一次页面跳转的时候，后台服务器都会给返回一个新的 html 文档，这种类型的网站也就是多页网站，也叫做多页应用。多页面跳转刷新所有资源，每个公共资源(js、css 等)需选择性重新加载。 页面结构如图： 为什么多页应用的首屏时间快？首屏时间叫做页面首个屏幕的内容展现的时间，当我们访问页面的时候，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 HTTP 请求，所以页面展示的速度非常快。 为什么搜索引擎优化效果好（SEO）？搜索引擎在做网页排名的时候，要根据网页内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们每个页面所有的内容都放在 Html 中，所以这种多页应用，seo 排名效果好。 但是它也有缺点，就是切换慢因为每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会发现明显的卡顿。新的需求促进新的技术诞生，随着业务量变大功能的复杂，前端对页面性能的要求越来越高，随之而来的就是单页面的应用。 单页应用（SinglePage Web Application，SPA）第一次进入页面的时候会请求一个 html 文件，刷新清除一下。页面切换，也不是传统的请求另一个页面的 html,而是通过路由，改变组件，此时路径也相应变化，但是并没有新的 html 文件请求，页面内容也变化了。原理是：JS 会感知到 url 的变化，通过这一点，可以用 js 动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求 html 文件了。 页面结构如图： 为什么页面切换快？页面每次切换跳转时，并不需要做 html 文件的请求，这样就节约了很多 http 发送时延，我们在切换页面的时候速度很快。 缺点：首屏时间慢，SEO 差单页应用的首屏时间慢，首屏时需要请求一次 html，同时还要发送一次 js 请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢。SEO 效果差，因为搜索引擎只认识 html 里的内容，不认识 js 的内容，而单页应用的内容都是靠 js 渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。 优缺点，必有解决的对策比如说服务器端渲染技术(如 SSR)可以解决 SEO 问题，通过这些技术可以完美解决这些缺点，解决完这些问题，实际上单页面应用对于前端来说是非常完美的页面开发解决方案。 具体对比分析： 多页应用模式MPA 单页应用模式SPA 组成 多个完整页面构成 一个外壳页面和多个页面片段组成 资源共用(css,js) 不共用，每个页面都需要加载 共用，只需在外壳部分加载 刷新方式 整页刷新 页面局部刷新或更改 URL模式 http://xxx/page1.html 和 http://xxx/page2.html http://xxx/shell.html#page1 和 http://xxx/shell.html#page2 用户体验 页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上 页面片段间的切换快，用户体验好，包括在移动设备上 能否实现转场动画 无法实现 容易实现（手机app动效） 页面间传递数据 依赖URL、cookie或者localstorage，实现麻烦 因为在一个页面内，页面间传递数据很容易实现(父子之间传值，或vuex或storage之类) 搜索引擎优化（SEO） 可以直接做 不利于SEO检索，可利用SSR来实现 特别适用的范围 需要对搜索引擎友好的网站 对体验要求高的应用，特别是移动应用 购物网站","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"js基础","slug":"js基础","permalink":"http://yoursite.com/tags/js基础/"}],"author":"胡豪"},{"title":"JavaScript中深拷贝与浅拷贝的理解","slug":"JavaScript中深拷贝与浅拷贝的理解","date":"2019-10-08T01:08:15.000Z","updated":"2019-10-11T07:13:08.408Z","comments":true,"path":"2019/10/08/JavaScript中深拷贝与浅拷贝的理解/","link":"","permalink":"http://yoursite.com/2019/10/08/JavaScript中深拷贝与浅拷贝的理解/","excerpt":"","text":"前言之所以会出现了深拷贝和浅拷贝，究其根本是因为JS种的变量包含了不同类型的数据值：基本类型和引用类型；同时其中变量的存储方式也不用Object属于堆内存的储存方式；并且JS的值的传递方式如值传递和址传递的会出现不同，所以才会出现这一系列的问题，因此才会使用深拷贝和浅拷贝来解决这些问题。 一、理解堆栈，基本数据类型和引用数据类型 1.堆栈 栈（stack）：系统自动分配的内存空间，内存会由系统自动释放，用来存放函数的参数值，局部变量的值等，特点是先进后出。 堆堆（heap）：系统动态分配的内存，内存大小不一，内存不会自动释放。一般由程序员分配释放，主要负责像Obejct这种变量类型的存储。 2.基本数据类型 概念：存放在栈内存中的简单数据段，数据大小确定，内存空间大小确定 6种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol 3.引用数据类型 概念：存放在堆内存中的数据，如对象、数组、函数等。名存在栈内存，值存在堆内存，栈内存会提供一个引用的地址指向堆内存中的值 二、JavaScript浅拷贝浅拷贝：只复制一层对象属性，可以理解为，只复制对象的基本属性类型，而基本属性类型是存放在栈内存中的，可以直接修改访问的，所以当浅拷贝时，拷贝的对象只是拷贝了原对象的属性，而值都是指向同一个栈内存中的数据，当对象属性值发生修改时，原对象也会被修改。如下示例： 1234567891011121314let arr1 = &#123; color:'red', name:'apple', weight:'100g', detail:&#123; big:'true', eating:'no' &#125; &#125;;let arr2;arr2 = arr1;arr2.color = 'black';console.log(arr2); console.warn(arr1); 输出值： 三、JavaScript深拷贝深拷贝：它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。这是我从某官网看来的解释，我感觉挺绕的，结合对象来看，深拷贝存在于对象这种引用类型中，而引用类型的数据是存在堆内存上的，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。深拷贝可以看做是在堆内存中新开辟了一个内存空间，复制后的对象的属性所指的指针会指向新开辟的内存空间的地址。所以复制后的对象对属性值进行修改不会影响原对象的属性值。 四、实现深拷贝的方式1.借用JSON对象的 parse 和 stringify(接上面的例子) 1234 let arr3 = JSON.parse(JSON.stringify(arr1));arr3.color=\"balck\";console.log(arr3);console.warn(arr1); 输出结果 2.通过for循环递归调用 12345678910111213141516171819202122function deepClone(obj)&#123; //判断obj是否是数组 let objClone = Array.isArray(obj)?[]:&#123;&#125;; if(obj &amp;&amp; typeof obj===\"object\")&#123; for(key in obj)&#123; if(obj.hasOwnProperty(key))&#123; //判断ojb子元素是否为对象，如果是，递归复制 if(obj[key]&amp;&amp;typeof obj[key] ===\"object\")&#123; objClone[key] = deepClone(obj[key]); &#125;else&#123; //如果不是，简单复制 objClone[key] = obj[key]; &#125; &#125; &#125; &#125; return objClone; &#125; var arr4 = deepClone(arr1); arr4.name='bananer'; console.log(arr4); console.warn(arr1); 输出结果 3.封装深拷贝函数 12345678910111213141516171819202122 function deepClone(obj) &#123; let objClone = Array.isArray(obj) ? [] : &#123;&#125;; if(obj &amp;&amp; typeof obj === \"object\") &#123; for(key in obj) &#123; if(obj.hasOwnProperty(key)) &#123; // 判断 obj 是否是对象,如果是，递归复制 if(obj[key] &amp;&amp; typeof obj[key] === \"object\") &#123; objClone[key] = deepClone(obj[key]); &#125;else&#123; // 如果不是 objClone[key] = obj[key]; &#125; &#125; &#125; &#125; return objClone&#125; let a = [1,2,3,4], b = deepClone(a);a[0] = 5;console.log(a,b)","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}],"author":"刘涛"},{"title":"闭包的概念与应用","slug":"闭包的概念与应用","date":"2019-10-07T12:28:12.000Z","updated":"2019-10-11T07:13:08.420Z","comments":true,"path":"2019/10/07/闭包的概念与应用/","link":"","permalink":"http://yoursite.com/2019/10/07/闭包的概念与应用/","excerpt":"","text":"什么是闭包？作为一个 JavaScript 语言的开发者，提起闭包肯定不会感到陌生，那么到底什么才是闭包哪？ 闭包不是什么新奇的概念，它早在高级语言开始发展的年代就产生了。闭包（Closure）是词法闭包的简称。对闭包的具体定义有很多种说法，这些说法大体可以分为两类： 一种说法认为闭包是符合一定条件的函数。认为闭包是在其词法上下文中引用了自由变量（自由变量是指局部变量以外的变量）的函数。 另一种说法认为闭包是函数和与其相关的引用环境组合而成的实体。认为闭包是在实现深约束时，需要创建一个能显示表示引用环境的东西，并将它与相关的子程序捆绑在一起，这样捆绑起来的整体被称为闭包。 这两种定义在某种意义上是对立的，一个认为闭包是函数，另一个认为闭包是函数和引用环境组成的整体。很明显第二种说法更确切一些，闭包只是在形式和表现上像函数，但实际上不是函数。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化，所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。所谓引用环境是指在程序执行中的某个点所有处于活跃状态的约束组成的集合。其中的约束是指一个变量的名字和其所代表的对象之间的联系。 JavaScript 闭包的本质在支持嵌套作用域的语言中，有时不能简单直接的确定函数的引用环境。这样的语言一般具有这样的特性： 函数是一等公民，即函数可以作为一个函数的返回值或参数，还可以作为一个变量的值 函数可以嵌套定义，即在一个函数内部可以定义另一个函数。 JavaScript 闭包的源自两点，词法作用域和函数当做值传递。 作用域是查找变量时的一些规则。词法作用域就是定义在词法阶段的作用域。或者换句话说，词法作用域是由你书写代码时将变量和块作用域写在哪里来决定的。按照代码书写时的样子，内部函数可以顺着作用域链一层一层地查找、访问函数外的变量，或者我们叫它自由变量。 函数当做值传递，也就是上面所说的函数是一等公民。函数内部的自由变量是在外层函数执行时创建的，外层函数执行完以后，这些变量理应被销毁，但是如果将内层函数作为返回值返回，这些自由变量就被保存了下来。而且无法访问，必须通过内层函数来访问。本来执行过程和词法作用域是封闭的，将内层函数作为返回值返回就提供了一种访问自由变量的方式。 一个函数如何能封闭外部状态哪？当外部状态的scope失效的时候，还有一份留在内部状态里面。在执行过程中，返回函数，或者将函数得以保留下来，并且函数中有自由变量就会形成闭包。一个函数中没有自由变量时，引用环境不会发生变化。 闭包的应用知道了什么是闭包，也理解了闭包的本质，下面可以了解下闭包的几种应用，或许你在日常的开发中已经用到不少了。 封装私有变量，存储计算的值12345678// 将计算的结果保存在 sum 中function add(init) &#123; var sum = init; return function getSum(number) &#123; sum += number; return sum; &#125;&#125; 延迟计算123456789101112131415// 延迟计算function add(init) &#123; var sum = init; var args = []; return function getSum() &#123; // 当参数到达一定的数量时再进行运算 args = args.concat(Array.from(arguments)); if(args.length &gt; 5) &#123; for(let i = 0; i &lt; args.length; i++) &#123; sum += args[i]; &#125; return sum; &#125; &#125;&#125; 延续局部变量的寿命img 对象经常用于进行数据上报，但是通过查询后台的记录可以得知，因为一些低版本的浏览器的实现可能存在 bug，在这些浏览器下使用 report 函数进行数据上报会丢失 30% 左右的数据，也就是说，report 函数并不是每一次都发起了 HTTP 请求。丢失数据的原因是 img 是 report 函数中的局部变量，当 report 函数调用结束后， img 局部变量随即被销毁，而此时或许还没来得及发出 HTTP 请求，所以此次请求就会丢失掉。 123456789101112131415// 这种方法会丢失 30% 左右的数据var report = function (src) &#123; var img = new Image(); img.src = src;&#125;;// 把 img 变量封装起来，就可以解决请求丢失的问题var report = (function()&#123; var imgs = []; return function(src) &#123; var img = new Image(); imgs.push(img); img.src = src; &#125;&#125;)(); 私有数据和应用程序接口有时，你想强制程序与数据的交互方式，以便保护其完整性。通过是使用闭包，完全可以做到这一点。创建此类接口的一种常见方法就是从函数返回对象。这时，定义在原函数中的数据只能由返回对象上定义的方法访问，下面是一个例子： 12345678910111213141516171819202122232425262728293031323334function makeCalendar(name) &#123; var calendar = &#123; owner: name, events: [], &#125;; return &#123; addEvent: function(event, dateString) &#123; var eventInfo = &#123; event: event, date: new Date(dateString), &#125;; calendar.events.push(eventInfo); calendar.events.sort(function(a, b) &#123; return a.date - b.date; &#125;); &#125;, listEvents: function() &#123; if (calendar.events.length &gt; 0) &#123; console.log(calendar.owner + \"'s events are: \"); calendar.events.forEach(function(eventInfo) &#123; var dateStr = eventInfo.date.toLocaleDateString(); var description = dateStr + \": \" + eventInfo.event; console.log(description); &#125;); &#125; else &#123; console.log(calendar.owner + \" has no events.\"); &#125; &#125;, &#125;;&#125; 闭包与内存管理局部变量本来应该在函数退出的时候被解除引用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就会一直存在。在这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。如果在将来需要回收这些变量的时候，可以手动把这些变量设置为 null。 参考内容 闭包的概念、形式与应用 什么是闭包？ JavaScript Weekly: Making Sense of Closures JavaScript 设计模式与开发实践","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"}],"author":"霜寒"},{"title":"对于Javascript执行上下文的理解","slug":"对于Javascript执行上下文的理解","date":"2019-09-24T02:35:15.000Z","updated":"2019-10-11T07:13:08.419Z","comments":true,"path":"2019/09/24/对于Javascript执行上下文的理解/","link":"","permalink":"http://yoursite.com/2019/09/24/对于Javascript执行上下文的理解/","excerpt":"","text":"前言在这篇文章中，将比较深入地阐述下执行上下文 – JavaScript中最基础也是最重要的一个概念。相信读完这篇文章后，你就会明白javascript引擎内部在执行代码以前到底做了些什么，为什么某些函数以及变量在没有被声明以前就可以被使用，以及它们的最终的值是怎样被定义的。 什么是执行上下文Javascript中代码的运行环境分为以下三种： 全局级别的代码 – 这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。 函数级别的代码 – 当执行一个函数时，运行函数体中的代码。 Eval的代码 – 在Eval函数内运行的代码。 我们可以将“执行上下文”看做当前代码的运行环境或者作用域。下面我们来看一个示例，其中包括了全局以及函数级别的执行上下文: 上图中，一共用4个执行上下文。紫色的代表全局的上下文；绿色代表person函数内的上下文；蓝色以及橙色代表person函数内的另外两个函数的上下文。注意，不管什么情况下，只存在一个全局的上下文，该上下文能被任何其它的上下文所访问到。也就是说，我们可以在person的上下文中访问到全局上下文中的sayHello变量，当然在函数firstName或者lastName中同样可以访问到该变量。 至于函数上下文的个数是没有任何限制的，每到调用执行一个函数时，引擎就会自动新建出一个函数上下文，换句话说，就是新建一个局部作用域，可以在该局部作用域中声明私有变量等，在外部的上下文中是无法直接访问到该局部作用域内的元素的。在上述例子的，内部的函数可以访问到外部上下文中的声明的变量，反之则行不通。那么，这到底是什么原因呢？引擎内部是如何处理的呢？ 执行上下文堆栈在浏览器中，javascript引擎的工作方式是单线程的。也就是说，某一时刻只有唯一的一个事件是被激活处理的，其它的事件被放入队列中，等待被处理。下面的示例图描述了这样的一个堆栈： 我们已经知道，当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行上下文堆栈的顶部。浏览器总是执行当前在堆栈顶部的上下文，一旦执行完毕，该上下文就会从堆栈顶部被弹出，然后，进入其下的上下文执行代码。这样，堆栈中的上下文就会被依次执行并且弹出堆栈，直到回到全局的上下文。请看下面一个例子： 1234567(function foo(i) &#123; if (i === 3) &#123; return; &#125;else &#123; foo(++i); &#125; &#125;(0)); 上述foo被声明后，通过()运算符强制直接运行了。函数代码就是调用了其自身3次，每次是局部变量i增加1。每次foo函数被自身调用时，就会有一个新的执行上下文被创建。每当一个上下文执行完毕，该上上下文就被弹出堆栈，回到上一个上下文，直到再次回到全局上下文。真个过程抽象如下图: 由此可见 ，对于执行上下文这个抽象的概念，可以归纳为以下几点： 单线程 同步执行 唯一的一个全局上下文 函数的执行上下文的个数没有限制 每次某个函数被调用，就会有个新的执行行下文为其创建，即使是调用的自身函数，也是如此。 执行上下文的建立过程我们现在已经知道，每当调用一个函数时，一个新的执行上下文就会被创建出来。然而，在javascript引擎内部，这个上下文的创建过程具体分为两个阶段: 建立阶段(发生在当调用一个函数时，但是在执行函数体内的具体代码以前) 建立变量，函数，arguments对象，参数 建立作用域链 确定this的值 代码执行阶段 变量赋值，函数引用，执行其它代码 实际上可以把执行上下文看做一个对象，其下包含以上3个属性： 12345(executionContextObj = &#123; variableObject: &#123; /* 函数中的arguments对象, 参数, 内部的变量以及函数声明 */ &#125;, scopeChain: &#123; /* variableObject 以及所有父执行上下文中的variableObject */ &#125;, this: &#123;&#125; &#125; 建立阶段以及代码执行阶段的详细分析 确切地说，执行上下文对象（上述的executionContextObj）是在函数被调用时，但是在函数体被真正执行以前所创建的。函数被调用时，就是我上述所描述的两个阶段中的第一个阶段 – 建立阶段。这个时刻，引擎会检查函数中的参数，声明的变量以及内部函数，然后基于这些信息建立执行上下文对象（executionContextObj）。在这个阶段，variableObject对象，作用域链，以及this所指向的对象都会被确定。 上述第一个阶段的具体过程如下： 找到当前上下文中的调用函数的代码 在执行被调用的函数体中的代码以前，开始创建执行上下文 进入第一个阶段-建立阶段: 建立variableObject对象: 建立arguments对象，检查当前上下文中的参数，建立该对象下的属性以及属性值 检查当前上下文中的函数声明:每找到一个函数声明，就在variableObject下面用函数名建立一个属性，属性值就是指向该函数在内存中的地址的一个引用,如果上述函数名已经存在于variableObject下，那么对应的属性值会被新的引用所覆盖。 初始化作用域链 确定上下文中this的指向对象 代码执行阶段：执行函数体中的代码，一行一行地运行代码，给variableObject中的变量属性赋值。下面来看个具体的代码示例: 12345678function foo(i) &#123; var a = 'hello'; var b = function privateB() &#123; &#125;; function c() &#123; &#125; &#125; foo(22); 在调用foo(22)的时候，建立阶段如下: 1234567891011121314fooExecutionContext = &#123; variableObject: &#123; arguments: &#123; 0: 22, length: 1 &#125;, i: 22, c: pointer to function c() a: undefined, b: undefined &#125;, scopeChain: &#123; ... &#125;, this: &#123; ... &#125; &#125; 由此可见，在建立阶段，除了arguments，函数的声明，以及参数被赋予了具体的属性值，其它的变量属性默认的都是undefined。一旦上述建立阶段结束，引擎就会进入代码执行阶段，这个阶段完成后，上述执行上下文对象如下: 1234567891011121314fooExecutionContext = &#123; variableObject: &#123; arguments: &#123; 0: 22, length: 1 &#125;, i: 22, c: pointer to function c() a: 'hello', b: pointer to function privateB() &#125;, scopeChain: &#123; ... &#125;, this: &#123; ... &#125; &#125; 我们看到，只有在代码执行阶段，变量属性才会被赋予具体的值。 局部变量作用域提升的缘由在网上一直看到这样的总结： 在函数中声明的变量以及函数，其作用域提升到函数顶部，换句话说，就是一进入函数体，就可以访问到其中声明的变量以及函数。这是对的，但是知道其中的缘由吗？相信你通过上述的解释应该也有所明白了。不过在这边再分析一下。看下面一段代码: 123456789101112(function() &#123; console.log(typeof foo); // function pointer console.log(typeof bar); // undefined var foo = 'hello', bar = function() &#123; return 'world'; &#125;; function foo() &#123; return 'hello'; &#125;&#125;());​ 上述代码定义了一个匿名函数，并且通过()运算符强制理解执行。那么我们知道这个时候就会有个执行上下文被创建，我们看到例子中马上可以访问foo以及bar变量，并且通过typeof输出foo为一个函数引用，bar为undefined。 为什么我们可以在声明foo变量以前就可以访问到foo呢？ 因为在上下文的建立阶段，先是处理arguments, 参数，接着是函数的声明，最后是变量的声明。那么，发现foo函数的声明后，就会在variableObject下面建立一个foo属性，其值是一个指向函数的引用。当处理变量声明的时候，发现有var foo的声明，但是variableObject已经具有了foo属性，所以直接跳过。当进入代码执行阶段的时候，就可以通过访问到foo属性了，因为它已经就存在，并且是一个函数引用。 为什么bar是undefined呢？ 因为bar是变量的声明，在建立阶段的时候，被赋予的默认的值为undefined。由于它只要在代码执行阶段才会被赋予具体的值，所以，当调用typeof(bar)的时候输出的值为undefined。","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}],"author":"刘涛"},{"title":"谈谈前端路由","slug":"谈谈前端路由","date":"2019-09-19T08:57:02.000Z","updated":"2019-10-11T07:13:08.419Z","comments":true,"path":"2019/09/19/谈谈前端路由/","link":"","permalink":"http://yoursite.com/2019/09/19/谈谈前端路由/","excerpt":"","text":"单页面应用与前端路由在传统的 Web 开发中，浏览器根据地址栏的 URL 向服务器发送一个 HTTP 请求，服务器根据 URL 返回一个 HTML 页面。这种情况下，一个 URL 对应一个 HTML 页面，一个 Web 应用包含很多 HTML 页面，这样的应用就是多页面应用；在多页面应用中，页面路由的控制由服务器负责，这种路由方式称为后端路由。 在多页面应用中，每次页面切换都需要向服务器发送一次请求，页面使用的静态资源也需要重新加载，存在一定的浪费。而且，页面的整体刷新对用户体验也有影响，因为不同页面间往往存在共同的部分，例如导航栏、侧边栏等，页面整体刷新也会导致公共部分的刷新。 有没有一种方式让 Web 应用只是看起来像多页面应用，也就是说 URL 的变化可以引起页面内容的变化，但不会向服务器发送新的请求哪？满足这种条件的 Web 应用就是单页面应用（Single Page Application，简称 SPA）。单页面应用虽然名为”单页“，但视觉上的感受仍然是多页面，因为 URL 发生变化，页面上的内容也会变化，但这只是逻辑上的多页面，实际上无论 URL 如何变化，对应的 HTML 文件都是同一个，这也是单页面应用名字的由来。在单页面应用中，URL 发生变化并不会向服务器发送新的请求，所以”逻辑页面“的变化只能由前端负责，这种方式称为前端路由。 前端路由的实现路由就是 URL 到函数的映射，这个是前端路由的原理。如果做到在 URL 发生变化的时候不向服务器发送请求，而是去执行一个控制 UI 组件的函数哪？那就不得不说说 hash 和 history 这两种实现方案了。 基于 hash在一个 URL 的组成中，#号包括#号后边的部分称为 hash。在浏览器中，可以通过location.hash获取到。#代表网页中的一个位置，其右边的字符，就是该位置的标识符。比如： 12// #title 是 hashhttp://www.example.com/index.html#title #号是用来指导浏览器动作的，对服务器完全不起作用，HTTP 请求不会带上#号以及它后边的内容。单单改变#号后边的内容，浏览器只会滚动到指定的位置，不会重新加载网页。而且改变 hash 还会改变浏览器的历史记录。我们可以通过onhashchange监听到 hash 的改变来不刷新浏览器触发视图的更新。代码如下： 123456&lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;white&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#yellow\"&gt;yellow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#green\"&gt;green&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;这是页面的内容 123456789101112131415161718192021222324252627282930313233343536373839404142function Router() &#123; this.routes = &#123;&#125;; this.currentUrl = \"\";&#125;Router.prototype.route = function(path, callback) &#123; this.routes[path] = callback || function() &#123; console.log(\"请为路由绑定处理方法\"); &#125;;&#125;;Router.prototype.refresh = function() &#123; console.log(\"触发一次 hashchange，hash值为\", location.hash); this.currentUrl = \"/\" + location.hash.slice(1); // 执行当前路由绑定的方法 this.routes[this.currentUrl]();&#125;;Router.prototype.init = function() &#123; window.addEventListener(\"DOMContentLoaded\", this.refresh.bind(this), false); window.addEventListener(\"hashchange\", this.refresh.bind(this), false);&#125;;window.Router = new Router();window.Router.init();var content = document.querySelector(\"body\");function changeBgColor(color) &#123; content.style.backgroundColor = color;&#125;Router.route(\"/\", function() &#123; changeBgColor(\"white\");&#125;);Router.route(\"/yellow\", function() &#123; changeBgColor(\"yellow\");&#125;);Router.route(\"/green\", function() &#123; changeBgColor(\"green\");&#125;); 基于 history 模式在 HTML5 规范中，history新增了一下几个 API： 123history.pushState(); // 添加新的状态到历史状态栈history.replaceState(); // 用新的状态代替当前状态history.state // 返回当前状态对象 通过上面两个操作状态的 API，也能够做到：改变 url 的同时，不刷新页面。所以 history 也具备实现路由控制的潜力。仅仅是改变 url 不刷新页面还不够，还要能够监听到 url 的变化。对于 hash 来说，hash 的改变可以出发 onhashchange 事件，history 并没有这样的事件可以监听。然而，对于一个应用来说，改变一个 url 只有下面三种途径： 点击浏览器的前进或者后退 点击 a 标签 在 JS 代码中直接修改路由 第 2 种和第 3 种途径可以看成是一种，因为 a 标签的默认事件可以被禁止，进而调用 js 方法。关键是第 1 种，HTML5 规范种新增了一个 onpopstate 事件，通过它便可以监听到前进或者后退的按钮点击。要特别注意的是：调用history.pushState和history.replaceState并不会触发 onpopstate 事件。 12345678910111213141516171819202122232425262728293031323334// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件window.addEventListener('DOMContentLoaded', onLoad)// 监听路由变化window.addEventListener('popstate', onPopState)// 路由视图var routerView = nullfunction onLoad () &#123; routerView = document.querySelector('#routeView') onPopState() // 拦截 &lt;a&gt; 标签点击事件默认行为， 点击时使用 pushState 修改 URL并更新手动 UI，从而实现点击链接更新 URL 和 UI 的效果。 var linkList = document.querySelectorAll('a[href]') linkList.forEach(el =&gt; el.addEventListener('click', function (e) &#123; e.preventDefault() history.pushState(null, '', el.getAttribute('href')) onPopState() &#125;))&#125;// 路由变化时，根据路由渲染对应 UIfunction onPopState () &#123; switch (location.pathname) &#123; case '/home': routerView.innerHTML = 'Home' return case '/about': routerView.innerHTML = 'About' return default: return &#125;&#125; hash vs historyhash 模式下，每个 url 都会带有#号，看起来可能不太友好。但是，hash 模式兼容 IE8 及其以上的浏览器。history 模式使用了 HTML5 里边新的 API，看起来会比较友好。但是，仅仅有前端的参与还是不够的，需要后端进行配置，前端的路由要和后端的路由要匹配起来，在刷新浏览器的时候会给后端发送请求，这个时候后台需要对请求的 url，做一个捕捉，将后端不存在的 url，重定向到指定路由。 参考内容 URL 中的 hash React 进阶之路 单页面应用路由实现原理 hash 和 history 两种模式的区别 前端路由原理解析和实现","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"前端路由","slug":"前端路由","permalink":"http://yoursite.com/tags/前端路由/"}],"author":"霜寒"},{"title":"什么是BFC","slug":"什么是BFC","date":"2019-09-18T01:48:56.000Z","updated":"2019-10-11T07:13:08.418Z","comments":true,"path":"2019/09/18/什么是BFC/","link":"","permalink":"http://yoursite.com/2019/09/18/什么是BFC/","excerpt":"","text":"前言对于BFC的概念以及应用场景一直都不是很明白，今天着重去了解了一下，做了以下总结。 什么是BFCBFC（Block Formatting Context）直译为“块级格式化范围”。是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用当涉及到可视化布局的时候，Block Formatting Context提供了一个环境，HTML元素在这个环境中按照一定规则进行布局。一个环境中的元素不会影响到其它环境中的布局。比如浮动元素会形成BFC，浮动元素内部子元素的主要受该浮动元素影响，两个浮动元素之间是互不影响的。这里有点类似一个BFC就是一个独立的行政单位的意思。也可以说BFC就是一个作用范围。可以把它理解成是一个独立的容器，并且这个容器的里box的布局，与这个容器外的毫不相干。 触发BFC float的值不能为none overflow的值不能为visible display的值为table-cell, table-caption, inline-block中的任何一个 position的值不为relative和static BFC的约束条件 内部的Box会在垂直方向上一个接一个的放置 垂直方向的距离有margin决定(属于同一个BFC的两个相邻Box的margin会发生重叠，与方向无关) 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此 BFC的区域不会与float的元素区域重叠 计算BFC的高度时，浮动子元素也参与计算 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然 BFC的特性特性1：BFC会阻止垂直外边距折叠 按照BFC的定义，只有同属于一个BFC时，两个元素才有可能发生垂直margin的重叠，这个包括相邻元素或者嵌套元素，只要他们之间没有阻挡（比如边框、非空内容、padding等）就会发生margin重叠。 ①相邻兄弟元素margin重叠问题 1234567891011121314 &lt;style&gt; p&#123; color: #fff; background: #888; width: 200px; line-height: 100px; text-align:center; margin: 100px; &#125; &lt;/style&gt;&lt;body&gt; &lt;p&gt;ABC&lt;/p&gt; &lt;p&gt;abc&lt;/p&gt;&lt;/body&gt; 上面例中两个P元素之间距离本该为200px,然而实际上只有100px,发生了margin重叠。遇到这种情形，我们如何处理？只需要在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。 解决方案 12345678910111213141516171819 &lt;style&gt; p&#123; color: #fff; background: #888; width: 200px; line-height: 100px; text-align:center; margin: 100px; &#125; .wrap&#123; overflow:hidden; &#125; &lt;/style&gt;&lt;body&gt; &lt;p&gt;ABC&lt;/p&gt; &lt;div class=\"wrap\"&gt; &lt;p&gt;abc&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; ②父子元素margin重叠问题 1234567891011121314151617181920 &lt;style&gt; .box&#123; width:100px; height:100px; background:#ccc; &#125; .wrap &#123; background:yellow; &#125; .wrap h1&#123; background:pink; margin:40px; &#125; &lt;/style&gt;&lt;body&gt;&lt;div class=\"box\"&gt;box&lt;/div&gt;&lt;div class=\"wrap\"&gt; &lt;h1&gt;h1&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt; 解决方案 上图wrap元素与h1元素之间l理论上本该有个40px的上下margin值,然而实际上父子元素并没有存在margin值，与此同时，两个div元素的间距为40px。遇到这种情形，我们如何处理？处理方法其实有很多，在wrap元素中添加:overflow:hidden;或者overflow：auto；使其父元素形成一个BFC；也可以在wrap元素中添加border：1px solid；或是padding：1px；这些都可以有效解决父子元素margin重叠问题。 特性2：BFC不会重叠浮动元素如果一个浮动元素后面跟着一个非浮动的元素，那么就会产生一个覆盖的现象，很多自适应的两栏布局就是这么做的。比如下图的效果，参考例子 12345678910111213141516171819&lt;style&gt;.box1&#123; height: 100px; width: 100px; float: left; background: lightblue;&#125;.box2&#123;width: 200px; height: 200px; background: #eee;&#125;&lt;/style&gt;&lt;body&gt;&lt;div class=\"box1\"&gt;我是一个左浮动的元素&lt;/div&gt;&lt;div class=\"box2\"&gt;喂喂喂!大家不要生气嘛，生气会犯嗔戒的。悟空你也太调皮了，我跟你说过叫你不要乱扔东西，你怎么又……你看，我还没说完你就把棍子给扔掉了!月光宝盒是宝物，你把它扔掉会污染环境，要是砸到小朋友怎么办，就算砸不到小朋友，砸到花花草草也是不对的。&lt;/div&gt;&lt;/body&gt; 上图中，文字围绕着浮动元素排列，不过在这里，这显然不是我们想要的。此时我们可以为.box2元素的样式加上overflow:hidden；使其建立一个BFC,让其内容消除对外界浮动元素的影响。 这个方法可以用来实现两列自适应布局，效果不错，此时左边的宽度固定，右边的内容自适应宽度。如果我们改变文字的大小或者左边浮动元素的大小，两栏布局的结构依然没有改变！ 特性3：BFC可以包含浮动—-清除浮动我们都知道浮动会脱离文档流，接下来我们看看下面的例子： 12345678910111213141516171819&lt;style&gt; .par &#123; border: 5px solid #fcc; width: 300px; &#125; .child &#123; border: 5px solid #f66; width:100px; height: 100px; float: left; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=\"par\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt; &lt;div class=\"child\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 由于容器内两个div元素浮动，脱离了文档流，父容器内容宽度为零（即发生高度塌陷），未能将子元素包裹住。解决这个问题，只需要把把父元素变成一个BFC就行了。常用的办法是给父元素设置overflow:hidden","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}],"author":"刘涛"},{"title":"使用console进行 性能测试 和 计算代码运行时间","slug":"使用console进行-性能测试-和-计算代码运行时间","date":"2019-09-17T06:42:09.000Z","updated":"2019-10-11T07:11:00.817Z","comments":true,"path":"2019/09/17/使用console进行-性能测试-和-计算代码运行时间/","link":"","permalink":"http://yoursite.com/2019/09/17/使用console进行-性能测试-和-计算代码运行时间/","excerpt":"","text":"前言对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用 debugger 会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。 traceconsole.trace()用来追踪函数的调用过程。 在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。 1&lt;button onclick=\"myFunction()\"&gt;跟踪轨迹&lt;/button&gt; 123456789101112131415function myFunction() &#123; console.log(1) myOtherFunction(); console.log(2)&#125;function myOtherFunction() &#123; console.log(3); myOtherFunction2(); console.log(4);&#125;function myOtherFunction2() &#123; console.trace();&#125; 打印结果： table使用console将对象以表格呈现 可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。 12345678910111213141516171819var Teletubbies = &#123; Tinky:&#123; name: 'Tinky', age: '3' &#125;, lala: &#123; name: 'lala', age: '6' &#125;, Daisy: &#123; name: 'Daisy', age: '4' &#125;, po:&#123; name:'po', age:'5' &#125;&#125;;console.table(Teletubbies); 打印结果： console.time进行时间计算计算程序的执行时间 可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上 12345console.time('计时器');for (var i = 0; i &lt; 1000; i++) &#123; for (var j = 0; j &lt; 1000; j++) &#123;&#125;&#125;console.timeEnd('计时器'); 以上代码可以计算出console.time(&#39;计时器&#39;)和console.timeEnd(&#39;计时器&#39;)之间的代码块所需要的时间。 还可以console.log配合Date对象计算除了console.time()还可以用console.log配合Date对象计算 1234567891011121314151617181920212223var beginTime = +new Date(); for (var i = 0; i &lt; 1000; i++) &#123; for (var j = 0; j &lt; 1000; j++) &#123;&#125; &#125;var endTime = +new Date();console.log(\"用时共计\"+(endTime-beginTime)+\"ms\");//或者var beginTime = new Date().getTime() for (var i = 0; i &lt; 1000; i++) &#123; for (var j = 0; j &lt; 1000; j++) &#123;&#125; &#125;var endTime = new Date().getTime()console.log(\"用时共计\"+(endTime-beginTime)+\"ms\");//或者var beginTime = Date.now()for (var i = 0; i &lt; 1000; i++) &#123; for (var j = 0; j &lt; 1000; j++) &#123;&#125; &#125;var endTime = Date.now()console.log(\"用时共计\"+(endTime-beginTime)+\"ms\"); 那么聪明的你肯定会问这三者的的区别 Date.now()与 new Date().getTime() 的区别它们都可以获取时间戳，但是实际上性能是不一样的（虽然差别不大，但是也算是一种性能的追求），可以做个测试 12345678910111213141516171819202122console.time('+new Date()')for(var i = 0; i &lt; 100000; i++) &#123; var o = + new Date()&#125;console.timeEnd('+new Date()')console.time('new Date().getTime:')for(var j = 0; j &lt; 100000; j++) &#123; var p = new Date().getTime();&#125;console.timeEnd('new Date().getTime:')console.time('Date.now()')for(var k = 0; k &lt; 100000; k++) &#123; var q = Date.now()&#125;console.timeEnd('Date.now()') //输出+new Date(): 42.31396484375msnew Date().getTime:: 33.93408203125msDate.now(): 24.561767578125ms 测试用例[https://jsperf.com/date-now-vs-new-date] profile使用console.profile测试程序性能 开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。 1234567891011121314151617function parent() &#123; for (var i = 0; i &lt; 10000; i++) &#123; childA() &#125;&#125;function childA() &#123; for (var i = 0; i &lt; 2000; i++) &#123;&#125;&#125;console.profile('性能分析');parent();console.profileEnd('性能分析');//执行后//Profile '性能分析' started.//Profile '性能分析' finished.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}],"author":"胡豪"},{"title":"前端性能优化一:性能指标","slug":"前端性能优化一-性能指标","date":"2019-09-16T02:27:35.000Z","updated":"2019-09-18T01:41:44.773Z","comments":true,"path":"2019/09/16/前端性能优化一-性能指标/","link":"","permalink":"http://yoursite.com/2019/09/16/前端性能优化一-性能指标/","excerpt":"","text":"如果我们想要提高我们的前端性能,那么首先你得先只知道怎么测量你的前端性能。但是哪些前端的性能指标我们应该关注呢?在Web1.0时代当我们讨论到前端性能指标用的最多的就是page load time。到了单页应用程序越来越多的时代,单一的page load time指标已经无法完全衡量前端性能了,因为一个单页应用程序page load time可能只触发了一次,但是用户会跟程序有很多的交互,每一个交互或者动作都需要有指标来衡量他的性能。 接下来就介绍几个比较重要的前端性能指标: first paint (FP):这个指标标志着浏览器渲染第一个像素点的时间 first contentful paint (FCP):和FP标志着任意一个像素点被渲染的时间不同,FCP标志着浏览器渲染第一个内容元素的时间,这些内容元素可以是text,image,SVG,canvas. 这两个指标对用户来说都是很重要的,这两个指标可以认为我们程序正在告诉我们的用户:我们正在正确工作。 First meaningful paint (FMP):这个指标标志着首屏最重要的一块区域的渲染,通常是用户最关注的区域。比如视频网站的视频播放区域,搜索网站的第一个搜索结果区域,又或者是购物网站的照片首图。通常来说浏览器很难清楚的了解哪一块是对于网站首屏来说是最关键的,所以开发者自己来告诉浏览器是哪一块是关键区域是很有必要的。 这也是非常关键的一个指标,通常如果用户能够快速的看到最重要的一块区域被渲染完成,即使其他的区域都还没有被渲染用户可能也不会注意到。 long task:我们都知道浏览器是单线程的在响应用户的操作时通过在任务队列里面增加任务,然后一个个的执行的.这意味着如果我们有一个长任务需要使用较长的时间,那么队列中的其他任务就只能等待,响应用户的操作就会变慢,或者动画就会变卡顿。 Time to interactive (TTI):这个指标表示浏览器已经渲染完了我们首屏需要显示的内容并且已经准备好接受用户的交互信息了,也标志着程序是否可用。程序暂时无法响应用户的交互有下面几个原因: 需要执行的javascript还没有执行完成。 有长任务阻绝着主线程.无法给用户响应。 指标 介绍 first paint (FP)/first contentful paint (FCP) 程序是否正确的开始渲染 First meaningful paint (FMP) 用户最关注的的首屏内容显示 Time to interactive (TTI) 程序是否可用 long task 程序使用的体验(是否响应延迟,动画卡顿) 还有一些其他的指标比如 First Input Delay(首次接受用户响应的延迟时间) First CPU Idle(第一次CPU闲置的时间):这些指标都和上面的指标有着直接的关系。 用户体验知道了这些指标,我们要把这些指标控制在什么样的时间才能给用户带来比较好的用户的体验呢,下面有这样一张表 时间 介绍 0到16ms 用户希望看的动画能够流畅,动画卡顿会带来非常差的用户体验,在浏览器上每秒钟渲染60帧动画就能够保持流畅,这大约就是16ms渲染一帧，这16ms包括了浏览器要渲染新的元素到页面上需要的时间，也就是说程序有大约10ms的时间可以进行操作。 0到100ms 在这个时间内响应用户的交互,用户会觉得响应是非常及时的 100到300ms 用户会感觉到有一些延迟 300到1000ms 当执行一些页面加载或者页面跳转的时候,在这个时间内是一个正常的加载跳转时间 1000ms或以上 超过1000ms(1秒),用户会对之前的操作渐渐失去耐心和注意力 10000ms或以上 当你的响应超过10秒,用户会感到烦躁,然后终止之前操作 上面的延迟时间取决于你使用什么样的网络和设备,比如你使用的电脑和wifi网络,用户在1000ms是一个比较现实的目标。但是当你设备是手机网络只有3G的时候在5000ms内加载才是更现实的目标。 响应时间:处理响应用户的操作在50ms以内在大多数的时间里，用户在使用程序时大多数的时间都在等待网站响应他们的操作比如点击一个按钮,在文本框中输入内容,而不是等待网站加载。那么网站比较理想的响应用户时间是在100ms以内。 100ms?不是50ms吗?我们的目标是在100ms以内响应用户的操作,那为什么处理用户的响应时间只有50ms?因为在我们接受到用户的输入时,可能会有别的任务正在执行.比如我们接受到用户在文本框中输入了一个A,这个时候浏览器正在执行别的任务,浏览器会把这个操作先加入到任务队列里,等浏览器执行完之前的任务才会去处理用户的响应。那么保守的估计为了让用户在100ms以内获得响应,我们的处理用户响应的执行时间就是50ms。 动画:生产每一帧动画的时间在10ms左右理论上来说只要没16ms渲染一帧,动画就会看起来是流畅的,但是浏览器大约需要6ms的时间来将每一帧渲染到画面上.因此产生每一帧动画的时间留给程序的大约就10ms左右。 主线程闲置时间越多越好主线程能够有尽可能多的闲置时间,那么当产生用户交互时就可以立马给用户响应。当主线程闲置时,浏览器会有很多的内部程序需要执行,比如闲置GC等。 主要内容渲染完成且程序可交互时间在5秒之内当页面加载缓慢,用户会失去耐心。网站的加载和响应速度直接影响用户的体验。 如何测试这些指标使用测试工具或者网站 Chrome DevTools-Audits WebPageTest 在真实的用户环境获得这些指标在介绍如何在用户真实环境中或者这些指标之前先介绍一些API performance.mark:创建给定标记的一个timestamp。 performance.measure:两个mark之间所经历的时间 PerformanceObserver:PerformanceObserver接口用于监控性能,可以根据传入的监控事件返回对应的PerformanceEntry对象。 获得FP/FCP1234567891011121314const observer = new PerformanceObserver((list) =&gt; &#123; for (const entry of list.getEntries()) &#123; //这里的name是为了区分'first-paint','first-contentful-paint' const metricName = entry.name; const time = Math.round(entry.startTime + entry.duration); reportToServer(&#123; eventCategory: 'Performance Metrics', eventAction: metricName, eventValue: time, nonInteraction: true, &#125;); &#125; &#125;); observer.observe(&#123;entryTypes: ['paint']&#125;); 根据你首屏最重要的元素获得FMP之前已经介绍过对于浏览器来说很那准确的知道每个网站对重要的一块区域显示的时间,那么只有开发者自己能够准确的找到最重要的一块区域获得FMP,假设我们网站首屏最重要的元素是一个图片就可以这么写. 12345&lt;img src=\"important.jpg\" onload=\"performance.clearMarks('img displayed'); performance.mark('img displayed');\"&gt;&lt;script&gt;performance.clearMarks(\"img displayed\");performance.mark(\"img displayed\");&lt;/script&gt; 获得TTI目前在PerformanceObserver中还没有办法获得TTI的接口,通过这个tti-polyfill可以知道这个tti 12345678910import ttiPolyfill from 'tti-polyfill.js';ttiPolyfill.getFirstConsistentlyInteractive().then((tti) =&gt; &#123; reportToServer(&#123; eventCategory: 'Performance Metrics', eventAction: 'TTI', eventValue: tti, nonInteraction: true, &#125;);&#125;); 监视长任务之前提到过,长任务可能会影响浏览器对用户响应速度或者造成动画的卡顿.那么能意识到长任务的存在并且把他缩短是很有必要的。(长任务API认为50ms以上任务的为长任务) 1234567891011121314const observer = new PerformanceObserver((list) =&gt; &#123; for (const entry of list.getEntries()) &#123; reportToServer(&#123; eventCategory: 'Performance Metrics', eventAction: 'longtask', eventValue: Math.round(entry.startTime + entry.duration), //这里的长任务会包含一个attribute //https://w3c.github.io/longtasks/#sec-TaskAttributionTiming eventLabel: JSON.stringify(entry.attribution), &#125;); &#125;&#125;);observer.observe(&#123;entryTypes: ['longtask']&#125;); 监视响应延迟长任务会阻塞线程导致浏览器无法响应用户操作,之前也提到过如果能在100ms以内响应用户的操作就不会让用户觉得卡顿,那么如果能够监控到你关键交互的响应时间也是很有必要的 1234567891011121314const submitBtn = document.querySelector('#submit');submitBtn.addEventListener('click', (event) =&gt; &#123; const lag = performance.now() - event.timeStamp; if (lag &gt; 100) &#123; reportToServer(&#123; eventCategory: 'Performance Metric' eventAction: 'input-latency', eventLabel: '#subscribe:click', eventValue: Math.round(lag), nonInteraction: true, &#125;); &#125;&#125;); 幸存者偏差当我们的程序如果加载速度很慢(比如加载了过多的js),那么真实用户在网络环境不一致的情况下,有些响应过慢的用户可能早早的在加载完成前就已经退出网站,那么这里就会有一个幸存者偏差的问题.你监控的用户都是已经加载完成的用户。为了能够同时检测到退出的用户. 12345678910111213141516171819202122///写在最头部window.__trackAbandons = () =&gt; &#123; // 去掉事件监听那么这个方法只执行一次 document.removeEventListener('visibilitychange', window.__trackAbandons); //因为我们还没有加载report js API 所以我们要让服务器提供一个post接口在接收这次请求 const ANALYTICS_URL = 'https://ANALYTICS_URL'; const TRACKING_ID = 'TRACKING_ID'; const CLIENT_ID = (Math.random() * Math.pow(2, 52)); // Send the data to Google Analytics via the Measurement Protocol. navigator.sendBeacon &amp;&amp; navigator.sendBeacon(ANALYTICS_URL, [ 'v=1', 't=event', 'ec=Load', 'ea=abandon', 'ni=1', 'dl=' + encodeURIComponent(location.href), 'dt=' + encodeURIComponent(document.title), 'tid=' + TRACKING_ID, 'cid=' + CLIENT_ID, 'ev=' + Math.round(performance.now()), ].join('&amp;'));&#125;;//visibilitychange可以监听页面unload事件//https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_eventdocument.addEventListener('visibilitychange', window.__trackAbandons); 结论性能对现在的程序越来越重要,那么在一个程序需要进行性能优化的时候.个人认为可以按照这样的一个顺序进行: 数据收集-&gt;讨论性能指标阀值-&gt;针对性能优化-&gt;数据重新验证优化结果 这里主要讨论了我们一些性能指标和收集性能指标的方法,后面会讨论如何针对每一块进行优化。","categories":[],"tags":[]},{"title":"javascript中的Map","slug":"javascript中的Map","date":"2019-08-26T02:53:41.000Z","updated":"2019-09-18T09:21:45.122Z","comments":true,"path":"2019/08/26/javascript中的Map/","link":"","permalink":"http://yoursite.com/2019/08/26/javascript中的Map/","excerpt":"","text":"探究javascript Map什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。ECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。 语法1new Map([iterable]) iterable (可迭代传参)Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。 描述一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个 for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。 键的比较是基于 “SameValueZero” 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择： 一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。 Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。 你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。 Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。 Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。 Map 在涉及频繁增删键值对的场景下会有些性能优势。 最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;object获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。 属性 Map.length get Map[@@species] Map.prototype Map 实例*属性Map.prototype.constructor返回一个函数，它创建了实例的原型。默认是Map函数。 Map.prototype.size返回Map对象的键/值对的数量。 *方法Map.prototype.clear()移除Map对象的所有键/值对 。 Map.prototype.delete(key)如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false Map.prototype.entries()返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。 Map.prototype.forEach(callbackFn[, thisArg])按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。 Map.prototype.get(key)返回键对应的值，如果不存在，则返回undefined。 Map.prototype.has(key)返回一个布尔值，表示Map实例是否包含键对应的值。 Map.prototype.keys()返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。 Map.prototype.set(key, value)设置Map对象中键的值。返回该Map对象。 Map.prototype.values()返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。 Map.prototype@@iterator返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。 实例使用 Map 对象12345678910111213141516171819202122var myMap = new Map(); var keyObj = &#123;&#125;, keyFunc = function () &#123;&#125;, keyString = \"a string\"; // 添加键myMap.set(keyString, \"和键'a string'关联的值\");myMap.set(keyObj, \"和键keyObj关联的值\");myMap.set(keyFunc, \"和键keyFunc关联的值\"); myMap.size; // 3 // 读取值myMap.get(keyString); // \"和键'a string'关联的值\"myMap.get(keyObj); // \"和键keyObj关联的值\"myMap.get(keyFunc); // \"和键keyFunc关联的值\" myMap.get(\"a string\"); // \"和键'a string'关联的值\" // 因为keyString === 'a string'myMap.get(&#123;&#125;); // undefined, 因为keyObj !== &#123;&#125;myMap.get(function() &#123;&#125;) // undefined, 因为keyFunc !== function () &#123;&#125; 使用 for..of 方法迭代 Map12345678910111213141516171819202122var myMap = new Map();myMap.set(0, \"zero\");myMap.set(1, \"one\");for (var [key, value] of myMap) &#123; console.log(key + \" = \" + value);&#125;// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"for (var key of myMap.keys()) &#123; console.log(key);&#125;// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"for (var value of myMap.values()) &#123; console.log(value);&#125;// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"for (var [key, value] of myMap.entries()) &#123; console.log(key + \" = \" + value);&#125;// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\" 使用 forEach() 方法迭代 Map1234myMap.forEach(function(value, key) &#123; console.log(key + \" = \" + value);&#125;)// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\" Map 与数组的关系123456789101112var kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象var myMap = new Map(kvArray);myMap.get(\"key1\"); // 返回值为 \"value1\"// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组console.log(Array.from(myMap)); // 输出和kvArray相同的数组// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组console.log(Array.from(myMap.keys())); // 输出 [\"key1\", \"key2\"] 复制或合并 Maps12345678var original = new Map([ [1, 'one']]);var clone = new Map(original);console.log(clone.get(1)); // oneconsole.log(original === clone); // false. Useful for shallow comparison 请记住，数据本身未被克隆。 Map对象间可以进行合并，但是会保持键的唯一性。 123456789101112131415161718var first = new Map([ [1, 'one'], [2, 'two'], [3, 'three'],]);var second = new Map([ [1, 'uno'], [2, 'dos']]);// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。// 展开运算符本质上是将Map对象转换成数组。var merged = new Map([...first, ...second]);console.log(merged.get(1)); // unoconsole.log(merged.get(2)); // dosconsole.log(merged.get(3)); // three Map对象也能与数组合并： 1234567891011121314151617var first = new Map([ [1, 'one'], [2, 'two'], [3, 'three'],]);var second = new Map([ [1, 'uno'], [2, 'dos']]);// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。var merged = new Map([...first, ...second, [1, 'eins']]);console.log(merged.get(1)); // einsconsole.log(merged.get(2)); // dosconsole.log(merged.get(3)); // three 以上讲的是Map，那不得不说map( )是什么ECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 语法1var new_array = array.map(function callback(currentValue,index,arr), thisValue) 参数callback 生成新数组元素的函数，使用三个参数： currentValue callback 数组中正在处理的当前元素。 index可选 callback 数组中正在处理的当前元素的索引。 array可选 callback map 方法被调用的数组。 thisArg可选 执行 callback 函数时使用的this 值。 示例1234var array1 = [1,3,6];const map1 = array1.map(x =&gt; x *2);console.log(map1); // &gt; Array [2, 6, 12] 1234567891011var array1 = [1, 3,6];const map1 = array1.map(x =&gt; &#123; if (x == 3) &#123; return x * 2; &#125;&#125;); console.log(map1);// &gt; Array [undefined, 6, undefined] 出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了 123456789101112var array1 = [1, 3,6];const map1 = array1.map(x =&gt; &#123; if (x == 3) &#123; return x * 2; &#125; return x&#125;); console.log(map1);// &gt; Array [2, 6, 12] 可以使用 map 重新格式化数组中的对象 12345678910111213141516var oldArray = [&#123;key: 1, value: 10&#125;, &#123;key: 2, value: 20&#125;, &#123;key: 3, value: 30&#125;];var nowArr = oldArray.map(function(obj) &#123; var rObj = &#123;&#125;; rObj[obj.key] = obj.value; return rObj;&#125;);// nowArr 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], // oldArray 数组未被修改: // [&#123;key: 1, value: 10&#125;, // &#123;key: 2, value: 20&#125;, // &#123;key: 3, value: 30&#125;] 用ES5模拟实现ES6中的Map类与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：1.set(key,value):向字典中添加新元素。 2.remove(key):使用键名从字典中移除相应的元素。 3.has(key):如果某个键值存在于字典中，返回true，否则返回false。 4.get(key):通过键名找到指定的值并返回。 5.clear():清空字典。 6.size():返回字典中元素个数。 7.values():将字典所有值以数组形式返回。 8.getItems():返回items变量，代表字典本身。 1234567891011121314151617181920212223242526272829303132333435363738function Map() &#123; var items = &#123;&#125;; this.has = function(key)&#123; //has方法判断某个键值是否在字典中 return key in items; &#125;, this.set = function(key,value)&#123; //set方法为字典添加新元素或更新已有元素 items[key] = value; &#125;, this.remove = function(key)&#123; if (this.has(key)) &#123; delete items[key]; return true; &#125; return false; &#125;, this.get = function(key)&#123; return this.has(key)?items[key]:undefined; &#125;, this.values = function()&#123; var values = []; //for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。 for(var k in items)&#123; if (this.hasOwnProperty(k)) &#123; values.push(items[k]); &#125; &#125; return values; &#125;, this.clear = function()&#123; items = &#123;&#125;; &#125;, this.size = function()&#123; return Object.Keys(items).length; &#125;, this.getItems = function()&#123; return items; &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}],"author":"胡豪"},{"title":"如何为平台设计一个插件系统","slug":"如何为平台设计一个插件系统","date":"2019-08-25T04:19:13.000Z","updated":"2019-09-03T07:09:14.693Z","comments":true,"path":"2019/08/25/如何为平台设计一个插件系统/","link":"","permalink":"http://yoursite.com/2019/08/25/如何为平台设计一个插件系统/","excerpt":"","text":"随着web浏览器的发展,浏览器的性能越来越好,WebGL和WebAssembly提供越来越多的可能性。很多原本只能在终端运行的程序都开始开发web版本例如CAD的web版本,PS的web版本,figma。这一个个的设计协作平台原本在终端都有插件机制。那么如果在web端能提供一个插件机制,对于有一点编程能力的用户,就可以提供更好的用户体验和开发更多的可能性。如何开发一个好的插件系统呢? 一个javascript的插件系统需要满足以下几个方面: 安全性 插件不可以发送请求 插件和程序模块不可以非法的调用相互的数据 插件不可以在不受约束的情况下执行 插件不可以任意的修改UI,从而给用户造成误导 稳定性 插件不能影响主程序的稳定性 插件不可以修改主程序中的常量 易开发性 插件应该是容易开发的,即使是面对没有那么多编程经验的设计师,也应该是容易开发的。 插件要可以使用调试工具。 效率 插件的执行效率不能太慢从而影响整个主程序的效率。 方案一:iframe沙盒实现方式当我们在程序中执行第三方的代码的时候,首先第一个应该会想到的就是iframe。iframe不是我们每天都会用到的html标签。要理解为什么iframe为什么安全，我们有不要想一下iframe标签是用来干什么的。 iframe比较典型的使用场景就是在一个网页中嵌入一个其他的网页。举个例子来说,你需要在网站中嵌入谷歌地图的页面来实现地图的展现功能。你不会希望谷歌地图的页面中的代码有能力访问你本身的一些代码和敏感数据,相应的谷歌地图也不希望你能够访问他页面中的数据和代码。 这意味着一切和iframe的交互都受限于浏览器。当iframe和原网页有不同的域(imow.cn和google.com),他们是完全隔绝的。那么网页和iframe交互的唯一办法就是通过 postMessage。这个message是一个string。需要交互的双方可以选择忽略这个message或者做对应的动作。 iframe和原网页是完全独立的,其实,如果你想要的话浏览器允许我们通过另外一个线程来创建一个iframe。这里. 当我们了解了iframe是如何工作了以后,我们可以在我们需要执行第三方插件的时候创一个iframe，将插件的代码在iframe中执行。在iframe中插件可以执行任何代码,也不会影响到主程序,除非通过提前申明好的message。同时我们可以给iframe的域名设置为null,这意味着根据浏览器跨域保护策略,iframe无法给域名发送任何请求。 iframe就这样很简单的成为我们执行第三方插件的沙盒环境,他的安全性也通过浏览器来保证。插件在沙盒中执行,通过主程序提供的api(postMeassge)和主程序进行交互。代码就像下面这个样子 12345678const scene = await main.loadScene() // 从主程序获取界面数据scene.selection[0].width *= 2 // 修改界面数据scene.createNode(&#123; type: 'RECTANGLE', x: 10, y: 20, ...&#125;)await main.updateScene() // 向主程序发送修改后的界面数据 这里主要的代码是loadScene(发送消息给主程序,然后获得主程序界面的document拷贝),然后修改完以后通过调用updateScene(发送更新消息给主程序).这里需要注意的是 我们拷贝了整个document而不是在每次需要读取或者修改属性的时候通过message传输.postMessage每次传输需要0.1ms.每秒钟大约只允许1000 messages。 我们没有让插件直接使用postMessage api,而是包装了一个api给插件用户使用,这样使用起来不会太笨重。 问题#1:async/await 使用起来不是那么方便这种实现方式第一个问题就是对于一些不那么了解javascript的新手或者设计师来说,async/await关键字还是非常陌生的。但是要使用postMessge是一个异步操作。所以不可避免的要使用async/await来控制异步流程。但是如果只是需要在开头和结束的时候调用我们的api还方便,我们可以告诉用户在调用我们的api时候在前面加上async/await即使他们不知道这个关键字的作用也不会对他们的操作造成非常大的困扰。 但是问题是有些插件需要执行非常复杂的逻辑,在修改一个layout的属性的时候有时候会引起其他好几个layout的更新。比如更新外层的layout的属性之后,内部的layout的属性也可能发生了更新,这个时候你需要先提交你的属性,然后在重新或者视图的属性,那这个时候你的代码就会变成这样: 123456789await mian.loadScene()... 操作 ...await mian.updateScene()await mian.loadScene()... 操作 ...await mian.updateScene()await mian.loadScene()... 操作 ...await mian.updateScene() 这个代码一下子就变的不可控了,而且用户也很难确认什么时候应该要提交我的属性更新。 问题#2:拷贝视图给iframe的操作是非常昂贵的iframe这种实现方式的第二个问题就是,当你需要给插件发送视图信息的时候你需要序列化你的document发送给你iframe，当你的视图非常非常大的时候,这个序列化的操作是非常耗时的,甚至会导致内存溢出。即使我们可以使用增量的加载数据或者懒加载数据这种方式仍然有他的问题: 首先这种方式是非常难实现的,即使有比较好的方案实现了以后,面对比较大的视图,性能仍然不是很理想,而且对于插件开发者来说是非常难理解的，这违背了我们的插件易开发性。 异步方法需要等待你需要到的数据达到才能开始后面的操作,对于异步流程控制来说也是一个挑战(steam? Rx?)。 总的来说如果你的主程序有非常大的document要交给第三方插件来进行操作,那么iframe的这种实现方式就不是非常理想的解决方案 eval如果能在主线程上执行插件代码,那么在性能上就会好很多,但是我们又不能简单的eval(code)执行插件代码,因为这样是很不安全的。 什么导致eval不安全如果我们退一步想:是什么使eval方法不安全?如果我们只是执行一段很单纯的代码 12let code = 'let a = (7 + 1) * 8;'eval(code) 如果只是一段逻辑代码,那么这个代码是没有什么不安全的。之所以认为eval执行的代码不安全是因为在插件代码中有可能会发送网络请求,修改全局的state变量,或者直接修改dom对象等等这些使得我们的插件代码变的不可控,换句话来说是插件具有浏览器api访问的能力让我们插件的代码变的不可控。 是不是能把全局的对象藏起来?如果我们能把全局的对象藏起来,保证插件代码中只能做变量的赋值或者一些if判断的逻辑代码,没有了全局对象xhr,插件将无法发送请求,没有document对象,插件也不具备访问dom的能力,那么插件能力是不是能在我们的可控范围里面了。 隐藏全局对象,理论上是可行的。但是我们很难仅仅通过隐藏全局对象来创建一个绝对安全的运行环境。举例来说,我们现在把window对象设置为null,但是代码还是可以通过({}).constructor来访问全局对象。所以找到所有有可能访问危险api的对象,把所有的路全部堵死是非常难的一件事情。 是不是我们可以找到一个这些全局对象从一开始就不存在的沙盒环境? 方案二:将javascript编译成WebAssemblyDuktape是一个轻量级的用c++写的javascript解释器,他可以将javascript编译成WebAssembly,经过test262测试之后,可以确定他全面的支持了ES5的语法。 这种实现方法有以下几种优缺点 首先这是一种安全的执行环境,因为Duktape不支持任何的浏览器API。作为WebAssembly执行,他本身就是一个沙盒环境,他可以通过提供一个白名单的API和主程序进行交互。 这个解释器是运行在主线程上的。这意味着我们可以创建一个基于主线程的API。(共享document等) 他可能会比原本的javascript慢一些,因为JIT解释器在编译的时候做了很多的优化,但是作为WebAssembly我相信这个性能应该也是可以被接受的。 他需要用浏览器来编译WebAssembly,这会有一些性能消耗。 浏览器的调试工具就不能用了。 看起来好像不错，但是他作为一个线上项目的表现到底怎么样呢?一个javascript引擎来执行另外一个引擎?WebAssembly本身也是比较新的一个东西，我们是不是真的需要一个相对复杂的解决方案?有没有更简单的方法了? 方案三:Realms这个技术可以创建一个沙盒环境来支持插件,当我看到他readme文档的时候,就一下子提起了我的兴趣,Intuitions sandbox iframe without DOM principled version of Node’s ‘vm’ module sync Worker 这不就是我们需要的吗?他的代码看起来是这个样子 123456789let g = window; // outer globallet r = new Realm(); // root realmlet f = r.evaluate(\"(function() &#123; return 17 &#125;)\");f() === 17 // trueReflect.getPrototypeOf(f) === g.Function.prototype // falseReflect.getPrototypeOf(f) === r.global.Function.prototype // true 是不是很酷。这个技术其实可以用现在已有的但是不常用的一个javascript功能来实现。代码想这样 123456function simplifiedEval(scopeProxy, code) &#123; 'use strict' with (scopeProxy) &#123; eval(code) &#125;&#125; 这个就像一个简单版本的Realms,但是管中窥豹,我们可以看见两个关键代码with和Proxy对象。 with(obj)表达式创建了一个作用域,当寻找变量的时候,可以使用这个obj的属性.看个例子: 123456with (Math) &#123; a = PI * r * r x = r * cos(PI) y = r * sin(PI) console.log(x, y)&#125; 在这个例子里,当我们访问PI,cos,sin的时候,就会找到Math的属性。但是console因为Math没有就仍然会找到全局对象。 知道了with表达式,接下来就是Proxy对象,这个对象有下面几个特性 他是一个普通的javascript对象,可以通过obj.x访问对象的属性值. 我们可以实现一个对象属性的get方法来实现obj.x操作,实际上只执行这个get方法. 123456789const scopeProxy = new Proxy(whitelist, &#123; get(target, prop) &#123; // target === whitelist if (prop in target) &#123; return target[prop] &#125; return undefined &#125;&#125; 接下来我们就可以把这个scopeProxy对象作为参数传入with中,他就捕获作用域所有的变量查找,在这个scopeProxy的get方法中进行查找这个变量: 1234with (scopeProxy) &#123; document // undefined! eval(\"xhr\") // undefined!&#125; 这里只有whitelist的属性会被返回,其他都会返回undefined.但是其实利用一些类似({}).constructor表达式还是有可能访问全局对象的.此外,这个沙盒其实还是需要访问一些全局对象的方法的,类似Object.keys 为要给我们的插件系统访问受限全局api的方法然后又不会把window搞乱,Realms沙盒通过创建一个和主程序同源的iframe用来拷贝需要用到的全局API。这个iframe和我们第一种实现中创建的iframe不一样,他不是作为运行程序的沙盒。当你创建一个和主程序同源的iframe以后 他会拷贝一份分开的全局对象(比如:Object.prototype)。 这些全局对象可以从父文档中访问,也就是说我们可以在Realms访问这些全局对象. 我们将这些全局对象放入到Proxy的白名单(whitelist)中，这样在插件代码中就可以访问这些全局对象了。通过创建iframe来拷贝全局对象有一个很重要的好处:即使是通过({}).constructor对象访问到的全局对象,也会是iframe中拷贝的全局对象。这样的实现方式有这些优点: 他在主程序中运行。 因为他本身还是javascript,所以他仍然用JIT编译解析,浏览器对javascript的优化还是有效。 浏览器开发工具也还是有效的。 那么就剩下最后一个问题.他真的够安全了吗? 这样看起来结合了iframe的Realms看起来似乎已经挺不错的了,而且他本身也是tc39下面的项目,所以可靠性应该也不错。但是光有一个安全的沙盒环境是不够的,你的插件肯定需要和主程序进行交互,那么我们就肯定要为我们的插件系统提供API,提供给插件的API系统也一定要是安全的。 举个例子,console.log是浏览器的api是不是javascript功能,那么我们要为插件系统提供一个console.log方法,我们可以这样写: 1realm.evaluate(USER_CODE, &#123; log: console.log &#125;) 或者为了隐藏方法本身,我们可以要求他只传参数 1realm.evaluate(USER_CODE, &#123; log: (...args) =&gt; &#123; console.log(...args) &#125; &#125;) 看起来是这么回事,很可惜,这其实是一个安全漏洞,即使是第二种方法我们还是在Realms外面创建了一个匿名方法,然后直接传入到Realms中。这意味着插件可以通过方法的原型链访问到外部。 正确创建console.log方法的方法是,将这个方法通过Realms包裹起来在Realms内部创建像这样 12345678910111213141516171819// 创建一个工厂方法// 这个工厂方法返回一个新的方法他保存一个闭包const safeLogFactory = realm.evaluate(` (function safeLogFactory(unsafeLog) &#123; return function safeLog(...args) &#123; unsafeLog(...args); &#125; &#125;)`);// 创建一个安全的方法const safeLog = safeLogFactory(console.log);const outerIntrinsics = safeLog instanceof Function;const innerIntrinsics = realm.evaluate(`log instanceof Function`, &#123; log: safeLog &#125;);if (outerIntrinsics || !innerIntrinsics) throw new TypeError(); // 使用realm.evaluate(`log(\"Hello outside world!\")`, &#123; log: safeLog &#125;); 通常来说,在沙盒中不应该能够访问到外部的任何对象包括作用域。因为我们的插件和主程序运行在一个线程中，所以在提供api的时候要非常小心,特别是当你的api需要在realm内部操作外部对象的时候。这对于开发api的开发人员来说是不是有点太不友好了，一不小心就产生了安全隐患，(todo:完善起来)。 结论如果我们的主程序不是特别复杂而且庞大的话,第一种通过iframe的实现方式应该是最为简单的。 如果我们的主程序本身就是通过WebAssembly创建的例如CAD网页版,我们想第二种方式可能是比较适合他们的,或者他们提供更加优秀的基于WebAssembly的解决方案 最后一种方式如果我们能提供一种简单又安全的开发API的办法,这应该是一种性价比比较高的解决方案。","categories":[],"tags":[]},{"title":"call apply bind的区别和用法","slug":"call apply bind的区别和用法","date":"2019-08-22T00:49:23.000Z","updated":"2019-09-03T07:09:14.689Z","comments":true,"path":"2019/08/22/call apply bind的区别和用法/","link":"","permalink":"http://yoursite.com/2019/08/22/call apply bind的区别和用法/","excerpt":"","text":"前言在JavaScript中，call、apply和bind是Function对象自带的三个方法，它们最主要的作用是改变 this 的指向。在平时的工作中，除了在写一些基础类，或者公用库方法的时候会用到它们，其他时候 call 和 apply 的应用场景并不多。 call和applay的共同点它们的共同点是，都能够改变函数执行时的上下文，将一个对象的方法交给另一个对象来执行，并且是立即执行的。 为何要改变执行上下文？举一个生活中的小例子：平时没时间做饭的我，周末想给孩子炖个腌笃鲜尝尝。但是没有适合的锅，而我又不想出去买。所以就问邻居借了一个锅来用，这样既达到了目的，又节省了开支，一举两得。 改变执行上下文也是一样的，A 对象有一个方法，而 B 对象因为某种原因，也需要用到同样的方法，那么这时候我们是单独为 B 对象扩展一个方法呢，还是借用一下 A 对象的方法呢？当然是借用 A 对象的啦，既完成了需求，又减少了内存的占用。 另外，它们的写法也很类似，调用 call 和 apply 的对象，必须是一个函数 Function。 接下来，就会说到具体的写法，那也是它们区别的主要体现。 call和apply的区别它们的区别，主要体现在参数的写法上。先来看一下它们各自的具体写法。 call的写法 1Function.call(obj,[param1[,param2[,…[,paramN]]]]) 需要注意以下几点： 调用 call 的对象，必须是个函数 Function。 call 的第一个参数，是一个对象。 Function 的调用者，将会指向这个对象。如果不传，则默认为全局对象 window。 第二个参数开始，可以接收任意个参数。每个参数会映射到相应位置的 Function 的参数上。但是如果将所有的参数作为数组传入，它们会作为一个整体映射到 Function 对应的第一个参数上，之后参数都为空 1234567 function func (a,b,c) &#123;&#125;func.call(obj, 1,2,3)// func 接收到的参数实际上是 1,2,3func.call(obj, [1,2,3])// func 接收到的参数实际上是 [1,2,3],undefined,undefined applay的写法 1Function.apply(obj[,argArray]) 需要注意一下几点 它的调用者必须是函数 Function，并且只接收两个参数，第一个参数的规则与 call 一致。 第二个参数，必须是数组或者类数组，它们会被转换成类数组，传入 Function 中，并且会被映射到 Function 对应的参数上。这也是 call 和 apply 之间，很重要的一个区别。 12345678910func.apply(obj, [1,2,3])// func 接收到的参数实际上是 1,2,3func.apply(obj, &#123; 0: 1, 1: 2, 2: 3, length: 3&#125;)// func 接收到的参数实际上是 1,2,3 bind的使用bind()函数回创建一个新的函数(称为绑定函数) bind是ES5新增的一个方法 传参和call或apply类似 不会执行对应的函数，call或apply会自动执行对应的函数 返回对函数的引用 bind的写法 1fun.bind(thisArg[, arg1[, arg2[, ...]]]) bind 方法 与 apply 和 call 比较类似，也能改变函数体内的 this 指向。不同的是，bind 方法的返回值是函数，并且需要稍后调用，才会执行。而 apply 和 call 则是立即调用。 举例说明： 12345678910 function add (a, b) &#123; return a + b;&#125;function sub (a, b) &#123; return a - b;&#125;add.bind(sub, 5, 3); // 这时，并不会返回 8add.bind(sub, 5, 3)(); // 调用后，返回 8 如果 bind 的第一个参数是 null 或者 undefined，this 就指向全局对象 window。 应用场景：继承 1234567891011121314151617181920 function Animal(name,weight)&#123; this.name = name; this.weight = weight;&#125;function Cat()&#123; // 在call中将this作为thisArgs参数传递 // Animal方法中的this就指向了Cat中的this // 所以Animal中的this指向的就是cat对象 // 在Animal中定义了name和weight属性，就相当于在cat中定义了这些属性 // cat对象便拥有了Animal中定义的属性，从而达到了继承的目的 Animal.call(this,&apos;cat&apos;,&apos;50&apos;); //Animal.apply(this,[&apos;cat&apos;,&apos;50&apos;]); this.say = function()&#123; console.log(&quot;I am &quot; + this.name+&quot;,my weight is &quot; + this.weight); &#125;&#125;//当通过new运算符产生了cat时，Cat中的this就指向了cat对象var cat = new Cat();cat.say();//输出=&gt; I am cat,my weight is 50 原型扩展在原型函数上扩展和自定义方法，从而不污染原生函数。例如：我们在 Array 上扩展一个 forEach 123456789101112131415function test()&#123; // 检测arguments是否为Array的实例 console.log( arguments instanceof Array, //false Array.isArray(arguments) //false ); // 判断arguments是否有forEach方法 console.log(arguments.forEach); // undefined // 将数组中的forEach应用到arguments上 Array.prototype.forEach.call(arguments,function(item)&#123; console.log(item); // 1 2 3 4 &#125;);&#125;test(1,2,3,4); 总结call 和 apply 的主要作用，是改变对象的执行上下文，并且是立即执行的。它们在参数上的写法略有区别。 bind 也能改变对象的执行上下文，它与 call 和 apply 不同的是，返回值是一个函数，并且需要稍后再调用一下，才会执行。 关于 call 和 apply 的便捷记忆法： 12345678910111213猫吃鱼，狗吃肉，奥特曼打小怪兽。有天狗想吃鱼了猫.吃鱼.call(狗，鱼)狗就吃到鱼了猫成精了，想打怪兽奥特曼.打小怪兽.call(猫，小怪兽)猫也可以打小怪兽了","categories":[],"tags":[]},{"title":"cookie、localstorage和sessionstorage三者之间的区别以及使用方式","slug":"cookie、localstorage和sessionstorage三者之间的区别以及使用方式","date":"2019-08-06T02:40:30.000Z","updated":"2019-09-03T07:09:14.690Z","comments":true,"path":"2019/08/06/cookie、localstorage和sessionstorage三者之间的区别以及使用方式/","link":"","permalink":"http://yoursite.com/2019/08/06/cookie、localstorage和sessionstorage三者之间的区别以及使用方式/","excerpt":"","text":"前言前端开发的时候，在网页刷新的时候，所有数据都会被清空，这时候就要用到本地存储的技术，前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage ，这是大家都知道的。 使用方式cookie： 保存cookie值 123var dataCookie=&apos;110&apos;; document.cookie = &apos;token&apos; + &quot;=&quot; +dataCookie; 获取指定名称的cookie值 1234567891011 function getCookie(name) &#123; //获取指定名称的cookie值// (^| )name=([^;]*)(;|$),match[0]为与整个正则表达式匹配的字符串，match[i]为正则表达式捕获数组相匹配的数组；var arr = document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;));if(arr != null) &#123; console.log(arr); return unescape(arr[2]);&#125;return null;&#125; var cookieData=getCookie(&apos;token&apos;); //cookie赋值给变量。 localStorage和sessionStorage：localStorage和sessionStorage所使用的方法是一样的, 下面以sessionStorage为例子： 1234567891011121314var name=&apos;sessionData&apos;;var num=120;sessionStorage.setItem(name,num);//存储数据sessionStorage.setItem(&apos;value2&apos;,119);let dataAll=sessionStorage.valueOf();//获取全部数据console.log(dataAll,&apos;获取全部数据&apos;);var dataSession=sessionStorage.getItem(name);//获取指定键名数据var dataSession2=sessionStorage.sessionData;//sessionStorage是js对象，也可以使用key的方式来获取值 console.log(dataSession,dataSession2,&apos;获取指定键名数据&apos;);sessionStorage.removeItem(name); //删除指定键名数据 console.log(dataAll,&apos;获取全部数据1&apos;); sessionStorage.clear();//清空缓存数据：localStorage.clear(); console.log(dataAll,&apos;获取全部数据2&apos;); 三者的异同：生命周期： cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效 localStorage：除非被手动清除，否则将会永久保存。 sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。 存放数据大小： cookie：4kb左右 localStorage和sessionStorage：可以保存5MB的信息 http请求： cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持 应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。 storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的。 localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。 浏览器的支持情况: localStorage和sessionStorage是html5才应用的新特性，可能有些浏览器并不支持，这里要注意。 cookie的浏览器支持没有找到，可以通过下面这段代码来判断所使用的浏览器是否支持cookie： 12345if(navigator.cookieEnabled) &#123; alert(&quot;你的浏览器支持cookie功能&quot;);//提示浏览器支持cookie &#125; else &#123; alert(&quot;你的浏览器不支持cookie&quot;);//提示浏览器不支持cookie &#125; 数据存放处： Cookie、localStorage、sessionStorage数据存放处 各浏览器Cookie大小、个数的限制 1. 浏览器允许每个域名所包含的cookie数： Microsoft指出InternetExplorer8增加cookie限制为每个域名50个，但IE7似乎也允许每个域名50个cookie。 Firefox每个域名cookie限制为50个。 Opera每个域名cookie限制为30个。 Safari/WebKit貌似没有cookie限制。但是如果cookie很多，则会使header大小超过服务器的处理的限制，会导致错误发生。 注：“每个域名cookie限制为20个”将不再正确！ 2. 当很多的cookie被设置，浏览器如何去响应： 除Safari（可以设置全部cookie，不管数量多少），有两个方法： 最少最近使用（leastrecentlyused(LRU)）的方法：当Cookie已达到限额，自动踢除最老的Cookie，以使给最新的Cookie一些空间。Internet Explorer和Opera使用此方法。 Firefox很独特：虽然最后的设置的Cookie始终保留，但似乎随机决定哪些cookie被保留。似乎没有任何计划（建议：在Firefox中不要超过Cookie限制）。 3. 不同浏览器间cookie总大小也不同： Firefox和Safari允许cookie多达4097个字节，包括名（name）、值（value）和等号。 Opera允许cookie多达4096个字节，包括：名（name）、值（value）和等号。 Internet Explorer允许cookie多达4095个字节，包括：名（name）、值（value）和等号。 注：多字节字符计算为两个字节。在所有浏览器中，任何cookie大小超过限制都被忽略，且永远不会被设置。最后：不要把什么数据都放在 Cookie、localStorage 和 sessionStorage中，毕竟前端的安全性这么低。只要打开控制台就可以任意的修改 Cookie、localStorage 和 sessionStorage的数据了。涉及到金钱或者其他比较重要的信息，还是要存在后台比较好。","categories":[],"tags":[]},{"title":"javascript垃圾回收机制","slug":"javascript垃圾回收机制","date":"2019-07-01T02:53:41.000Z","updated":"2019-09-03T07:09:14.692Z","comments":true,"path":"2019/07/01/javascript垃圾回收机制/","link":"","permalink":"http://yoursite.com/2019/07/01/javascript垃圾回收机制/","excerpt":"","text":"前言其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码 1234567891011121314151617181920var theThing = null;var replaceThing = function () &#123; var originalThing = theThing; var c = &apos;a&apos; function unused() &#123; if (originalThing) &#123; console.log(&quot;hi&quot;); &#125; &#125;; theThing = &#123; longStr: new Array(1000000).join(&apos;*&apos;), someMethod: function () &#123; console.log(&apos;1111&apos;); &#125; &#125;;&#125;;setInterval(replaceThing,1000) 最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步: 识别哪些对象需要被回收。 回收/重复使用需要被回收对象的内存。 压缩/整理内存(有些可能没有) 而常见的识别对象是否需要回收的机制有下面几种: 引用计数 (Python) 逃逸分析 (Java) Tracing/Reachable 追踪分析 (javascript) 今天就主要看一下V8中GC的具体实现方式 Tracing/Reachable 追踪分析GC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。 The Generational HypothesisGenerational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。 ScavengerV8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。 第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。 第二次GC 在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。 ParallelParallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。 Scavenger平行调度,同时有多个帮助线程和主线程参与 Major GCMajor GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。 ConcurrentConcurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。 Major GC同步调度 什么时候会执行GC在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。 我们可以通过手动设置来设置新生代和老代的space大小: 12node --max-old-space-size=1700 index.jsnode --max-new-space-size=1024 index.js 空闲时GC虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过requestIdleCallback事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解React 16 fiber的实现)。 利用主线程空闲时间进行GC Incremental那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。 将一整个GC切分成一小块GC任务,插入到主线程中进行 总结不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。 最后的最后将之前的内存泄漏代码一步步的推演: 首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。 1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。 如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing-&gt;longStr(reachable),theThing-&gt;someMethod(reachable),execution stack -&gt; setInterval -&gt; closure -&gt; originThing(reachable)。所有标记完成。此时: 123456789 from-space to-spacetheThing (reachable) theThingreplaceThing (reachable) replaceThingunused originThingoriginThing (reachable) =&gt; longStr c someMethodlongStr (reachable) someMethod (reachable) 在过1000毫秒以后又执行replaceThing,又执行一遍步骤2 第二次GC开始 123456789 from-space to-space old-spacetheThing (reachable) theThing originThing -&gt; theThingreplaceThing (reachable) replaceThing theThing -&gt; longStrunused originThing theThing -&gt; someMethodoriginThing (reachable) =&gt; longStr =&gt; someMethod -&gt; originThing(closure) c someMethodlongStr (reachable) someMethod (reachable) 因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法 123456 old-spaceoriginThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure) 结论主要导致内存泄漏的原因是 闭包是在声明的时候被创建的,而不是执行的时候被创建的。 然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。 12345678910111213141516171819202122var theThing = null;var replaceThing = function () &#123; var originalThing = theThing; var c = &apos;a&apos; function unused() &#123; if (originalThing) &#123; console.log(&quot;hi&quot;); &#125; &#125;; theThing = &#123; longStr: new Array(1000000).join(&apos;*&apos;), someMethod: function () &#123; console.log(&apos;1111&apos;); &#125; &#125;; originalThing = null; //手动释放局部作用域中的变量&#125;;setInterval(replaceThing,1000)","categories":[],"tags":[]},{"title":"==的隐式转换","slug":"==的隐式转换","date":"2019-04-28T01:13:40.000Z","updated":"2019-09-18T09:22:59.354Z","comments":true,"path":"2019/04/28/==的隐式转换/","link":"","permalink":"http://yoursite.com/2019/04/28/==的隐式转换/","excerpt":"","text":"前言==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的 探究==1234567891011121314151617181920212223242526272829303132333435363738 对象 \\ 字符串 布尔值 \\ / 数值1. 对象和布尔值比较对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字[] == true; //false []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false2. 对象和字符串比较对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。[1,2,3] == '1,2,3' // true [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;3. 对象和数字比较对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。[1] == 1; // true `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true4. 字符串和数字比较字符串和数字进行比较时，字符串转换成数字，二者再比较。'1' == 1 // true5. 字符串和布尔值比较字符串和布尔值进行比较时，二者全部转换成数值再比较。'1' == true; // true 6. 布尔值和数字比较布尔值和数字进行比较时，布尔转换为数字，二者比较。true == 1 // true7. other来看一个有趣的题[] == false;![] == false;还有一些需要记住的，像：undefined == null //true undefined和null 比较返回true，二者和其他值比较返回falseNumber(null) //0 特殊等式NaN 和 -0 在相等比较时的表现有些特别。由于NaN和自身不相等，所以必须使用ES6中的Number.isNaN(..) (或者polyfill)。而- 0 等于 0 （对于===也是如此），因此我们必须使用isNegZero(..)这样的工具函数。 ES6 中新加入一个方法Object.is(..)来判断两个值是否绝对相等，可以用来处理上述所有特殊情况： 123456var a = 2 / \"hello\";var b = -3 * 0;Object.is(a,NaN); //trueObject.is(b,-0); //trueObject.is(b,0); //false 小结能使用 == 或 === 就尽量不要使用Object.is(..),因为前者效率更高，更为通用。Object.is(..)主要用来处理那些特殊的相等比较。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"js基础","slug":"js基础","permalink":"http://yoursite.com/tags/js基础/"}],"author":"胡豪"}]}